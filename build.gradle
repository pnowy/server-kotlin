buildscript {
	ext {
		kotlinVersion = '1.3.10'
		springBootVersion = '2.0.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
	}
}

plugins {
    id 'com.google.cloud.tools.jib' version '0.10.0'
    id 'pl.allegro.tech.build.axion-release' version '1.9.3'
}

def jsonwebtokenVersion = "0.10.5"
def guavaVersion = "27.0-jre"
def kotlinLoggingVersion = "1.6.10"

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'pnowy'
version = scmVersion.version
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    compile "io.github.microutils:kotlin-logging:${kotlinLoggingVersion}"

    compile "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
    runtime "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    runtime "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"
    compile "com.google.guava:guava:${guavaVersion}"
    compile 'com.github.scribejava:scribejava-apis:5.4.0'
    compile 'org.zalando:problem-spring-web:0.24.0-RC.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.2.0'

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.liquibase:liquibase-core')
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('com.h2database:h2')

    runtimeOnly('org.postgresql:postgresql')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
}

// ./gradlew jibDockerBuild
jib {
    to {
        image = "pnowy/server-kotlin"
        tags = [project.version, 'latest']
    }
    container {
        jvmFlags = ['-XX:+UnlockExperimentalVMOptions', '-XX:+UseCGroupMemoryLimitForHeap']
        ports = ['8080']
        environment = [
                SPRING_OUTPUT_ANSI_ENABLED: 'ALWAYS'
        ]
        useCurrentTimestamp = true
        labels = [maintainer: 'pnowy']
    }
}
